#!/bin/bash
#PBS -j oe
#PBS -m ae
#PBS -N 8_hardfiltering2
#PBS -l select=1:ncpus=5:mem=10gb
#PBS -l walltime=15:00:00
#PBS -M your@email.au

ncpu=$(qstat -f $PBS_JOBID | grep "Resource_List.ncpus" | cut -d= -f2 | sed 's/ //g') 
s=$(if [ $ncpu == 1 ]; then echo ""; else echo "s"; fi)
mem=$(qstat -f $PBS_JOBID | grep "Resource_List.mem" | cut -d= -f2 | sed 's/ //g')
echo $(date)
echo "------------------------------------------------------"
echo "This job is allocated "$ncpu" CPU core$s and $mem on "
cat $PBS_NODEFILE | uniq
echo "------------------------------------------------------"
echo "PBS: Submitted to $PBS_QUEUE@$PBS_O_HOST"
echo "PBS: Working directory is $PBS_O_WORKDIR"
echo "PBS: Job identifier is $PBS_JOBID"
echo "PBS: Job name is $PBS_JOBNAME"
echo "------------------------------------------------------"

cd /path/to/snp_calling
shopt -s expand_aliases
source /etc/profile.d/modules.sh

# Load modules
module load conda3
source $CONDA_PROF/conda.sh
conda activate gatk4-4.2.0.0

# Define variables
REFERENCE="$PWD/reference/reference.unaligned.fasta"
OUTDIR="$PWD/8_hardfiltering_output"

# Filter variants according to filter expression to improve call set: SNP 
# Note: if working on exons or uces from invertebrates might be better to use the SOR filter, which is an alternative to estimating strand bias (like FS) because FS tend to penalize variants occuring at the ends of exons and uces are mainly exonic in inverts. Reads at the ends of exons tend to only be covered by reads in one direction and FS gives those vriants a bad score so adding SOR will take into account the ratios of reads that cover both alleles.
# OPTION for filtering ONLY snps that aren't around or within indels by masking and filtering indels out from the snp vcf file using either the "light-filtered" indel vcf file from joint genotyping or the hard filtered indel vcf file from VariantFiltration + SelectVariants. To do so, uncomment the three masking flags.

gatk VariantFiltration \
    -R ${REFERENCE}  \
    -V 7_GVCF_output/genotyped_X_samples_snps_recal1.vcf \
    -O ${OUTDIR}/genotyped_X_samples_snps_filtered_recal1.vcf \
    --mask 7_GVCF_output/genotyped_X_samples_indels_recal1.vcf \
    --mask-extension 5 \
    --mask-name InDel \
    --cluster-window-size 10 \
    --filter-expression "QUAL < 30.0" \
    --filter-name "LowQuality" \
    --filter-expression "QD < 4.0" \
    --filter-name "QualByDepth" \
    --filter-expression "MQ < 40.0" \
    --filter-name "RMSMappingQuality" \
    --filter-expression "FS > 60.0" \
    --filter-name "FisherStrand" &&
# --filter-expression "SOR > 4.0" \
# --filter-name "StrandOddsRatio" 

# Filter variants according to filter expression: INDEL
gatk VariantFiltration \
	-R ${REFERENCE} \
	-V 7_GVCF_output/genotyped_X_samples_indels_recal1.vcf \
    -O ${OUTDIR}/genotyped_X_samples_indels_filtered_recal1.vcf \
	-filter-name "QD_filter" \
    -filter-expression "QD < 2.0" \
	-filter-name "FisherStrand_filter" \
    -filter-expression "FS > 200.0" \
	-filter-name "LowQual_filter" \
    -filter-expression "QUAL < 30.0" &
# -filter-name "SOR_filter" \
# -filter-expression "SOR > 10.0"

wait

# Exclude filtered variants to get only the variants that PASSED the filtering as the input for the BaseRecalibration (BQSR) tool later on because, like many GATK tools, it might not ignore the "FAILED" variants status so better be on the safe side.

gatk SelectVariants \
    --exclude-filtered true \
    -V ${OUTDIR}/genotyped_X_samples_snps_filtered_recal1.vcf \
    -O ${OUTDIR}/bqsr_snps_recal1.vcf &&

gatk SelectVariants \
    --exclude-filtered true \
    -V ${OUTDIR}/genotyped_X_samples_indels_filtered_recal1.vcf \
    -O ${OUTDIR}/bqsr_indels_recal1.vcf &

wait

echo "Hard filtering round 2 is complete!"



